function addDocData() {	
	var titleValue = $('#doc_title').val();
	var memoValue = $('#doc_memo').val();
	var colorValue = $('#act-color').attr("data-color");
		
	// 제목
	if(titleValue == ''){
		titleValue = "내 문서 타이틀 명";
	}

	// 템플릿 테이터 	
	var spread1 = GC.Spread.Sheets.findControl(document.getElementById('excel_area'));
	var jsonString = JSON.stringify(spread1.toJSON( { includeBindingSource: true } ));

	$.ajax({
		url: '/Doc/add_doc_write_prc',
		type: 'POST',
		data: {
			doc_title: titleValue,
			doc_memo: memoValue,
			doc_color: colorValue,
			doc_data: jsonString     
		},
		dataType: 'json',		
		success: function (result) {
			if (result.code == 200) {
				alert("등록 되었습니다.");
				location.replace('/TC_Manager/document/template');
			}
		},
		error: function (request, status, error) {
			alert("오류가 발생하였습니다.\n잠시 후에 다시 시도해주세요.");
		},
	});	
}

window.onload = function(){
	/*
	var spread = new GC.Spread.Sheets.Workbook(
		document.getElementById("excel_area"),
		{sheetcount:1}                
	);
	var sheet = spread.getActiveSheet();
	*/
	var spread = new GC.Spread.Sheets.Workbook(document.getElementById("excel_area"), {calcOnDemand: true});
    var excelIo = new GC.Spread.Excel.IO();	

	//var designer = new GC.Spread.Sheets.Designer.Designer(document.getElementById("designerHost"), '', spread);

	var fileMenuTemplate = GC.Spread.Sheets.Designer.getTemplate(
		GC.Spread.Sheets.Designer.TemplateNames.FileMenuPanelTemplate
	);

	var listContainer = fileMenuTemplate.content[0].children[0].children[0].children[0].children[1];
	listContainer.items.splice(0,2);

	var listDisplayContainer = fileMenuTemplate.content[0].children[0].children[1];
	listDisplayContainer.children.splice(0,2);

	//좌측 리스트 구분선, 열기, 저장 제거
	var list = fileMenuTemplate.content[0].children[0].children[0];
	list.children[0].children.splice(2, 2);
	list.children[0].children.splice(3, 2);	 
	 
	GC.Spread.Sheets.Designer.registerTemplate(
		GC.Spread.Sheets.Designer.TemplateNames.FileMenuPanelTemplate, 
		fileMenuTemplate
	);

	var fileMenuPanelCommand = GC.Spread.Sheets.Designer.getCommand(
		GC.Spread.Sheets.Designer.CommandNames.FileMenuPanel
	);

	var oldExecuteFn = fileMenuPanelCommand.getState;
	fileMenuPanelCommand.getState = function (context, propertyName, newValue) {
	  let options = oldExecuteFn.apply(this, arguments);
	  if (options['activeCategory_main'] === 'New') {
		options['activeCategory_main'] = 'Print';
	  }
	  return options;
	}
	 
	var config = GC.Spread.Sheets.Designer.DefaultConfig;
	config.commandMap = {
	  fileMenuPanel: fileMenuPanelCommand
	}

	var designer = new GC.Spread.Sheets.Designer.Designer(document.getElementById("designerHost"), '', spread);
	
	document.getElementById('fileDemo').onchange = function () {
		var excelFile = document.getElementById("fileDemo").files[0];
		var incrementalEle = document.getElementById("incremental");
        var loadingStatus = document.getElementById("loadingStatus");

		document.getElementById('loading-container').style.display = "block";
		// here is excel IO API
        excelIo.open(excelFile, function (json) {
            var workbookObj = json;
			spread.fromJSON(workbookObj, {
				incrementalLoading: {
					loading: function (progress, args) {
						progress = progress * 100;
						loadingStatus.value = progress;
						console.log("current loading sheet", args.sheet && args.sheet.name());
					},
					loaded: function () {
						$('#addExcelFile').modal('hide');
					}
				}
			});           
        }, function (e) {
            // process error
            alert(e.errorMessage);
        });		
    };

	document.getElementById('reSet').onclick = function () {
		var loadingStatus = document.getElementById("loadingStatus");
		spread.clearSheets();
		spread.addSheet(0);
		spread.setActiveSheetIndex(0);
		loadingStatus.value = 0;
	};


	
	/**
	* Easy selector helper function
	*/
	const select = (el, all = false) => {
		el = el.trim()
		if (all) {
			return [...document.querySelectorAll(el)]
		} else {
			return document.querySelector(el)
		}
	}
	
	/**
	* Easy event listener function
	*/
	const on = (type, el, listener, all = false) => {
		if (all) {
			select(el, all).forEach(e => e.addEventListener(type, listener))
		} else {
			select(el, all).addEventListener(type, listener)
		}
	}
	
	//색상정렬
    $(".dropdown-menu.sort").on("click", ".dropdown-item", function() {
		var selectedColorId = $(this).find("div.color-label").attr("data-color");
		$("#act-color").attr("class", "color-label "+selectedColorId);
		$("#act-color").attr("data-color", selectedColorId);
	});

	//메모버튼
	if (select('.btn-memo')) {
		on('click', '.btn-memo', function(e) {		
			select('body').classList.toggle('toggle-memo')
		})
	}
	if (select('.btn-close2')) {
		on('click', '.btn-close2', function(e) {
			select('body').classList.toggle('toggle-memo')
		})
	}
}