function showNotification(colorName, text, placementFrom, placementAlign, animateEnter, animateExit) {if (colorName === null || colorName === '') { colorName = 'bg-black'; }if (text === null || text === '') { text = 'Turning standard Bootstrap alerts'; }if (animateEnter === null || animateEnter === '') { animateEnter = 'animated fadeInDown'; }if (animateExit === null || animateExit === '') { animateExit = 'animated fadeOutUp'; }var allowDismiss = true; $.notify({ message: text },{type: colorName,allow_dismiss: allowDismiss,newest_on_top: true,z_index: 1060,delay:1500,timer: 1000,placement: {from: placementFrom,align: placementAlign},animate: {enter: animateEnter,exit: animateExit},template: '<div data-notify="container" class="bootstrap-notify-container alert alert-dismissible {0} ' + (allowDismiss ? "p-r-35" : "") + '" role="alert" style="width:500px">' +'<button type="button" aria-hidden="true" class="close notify-close" data-notify="dismiss">×</button>' +'<span data-notify="icon"></span> ' +'<span data-notify="title">{1}</span> ' +'<span data-notify="message">{2}</span>' +'<div class="progress" data-notify="progressbar">' +'<div class="progress-bar progress-bar-{0}" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" style="width: 0%;"></div>' +'</div>' +'<a href="{3}" target="{4}" data-notify="url"></a>' +'</div>'});}function checkPassword(strVal){var regExp = /^.*(?=^.{8,16}$)(?=.*\d)(?=.*[a-zA-Z0-9])(?=.*[\{\}\[\]\/?.,;:|\)*~`!^\-_+┼<>@\#$%&\'\"\\\(\=]).*$/;if(strVal.search(/\s/g) > -1){showNotification("alert-warning", "비밀번호는 공백없이 입력해주세요.", "top", "center", "", "");return false;}if (!strVal.match(regExp)) {showNotification("alert-warning", "비밀번호는 영문, 숫자, 특수문자를 조합하여 최소 8자리 ~ 최대 16자리 이내로 입력해주세요.", "top", "center", "", "");return false;}	return true;}function checkName(strVal){	var regExp = /^[a-zA-Z0-9가-힣 ]{2,10}$/if (!strVal.match(regExp)) {showNotification("alert-warning", "이름은 한글, 영문, 숫자만 가능하며 최소 2자리 ~ 최대 10자리 이내로 입력해주세요.", "top", "center", "", "");return false;}	return true;}function checkEmail(strVal){	var regExp = /^[0-9a-zA-Z]([-_\.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_\.]?[0-9a-zA-Z])*\.[a-zA-Z]{2,3}$/i;if (!strVal.match(regExp)) {showNotification("alert-warning", "이메일 형식이 잘못 입력되었습니다.", "top", "center", "", "");return false;}	return true;}function resetForm(){$('form').each(function() {this.reset();});}function lodingModal(str){$('#modal-loading').modal(str);}(function() {"use strict";/*** Easy selector helper function*/const select = (el, all = false) => {el = el.trim()if (all) {return [...document.querySelectorAll(el)]} else {return document.querySelector(el)}}const on = (type, el, listener, all = false) => {if (all) {select(el, all).forEach(e => e.addEventListener(type, listener))} else {select(el, all).addEventListener(type, listener)}}const onscroll = (el, listener) => {el.addEventListener('scroll', listener)}if (select('.toggle-sidebar-btn')) {on('click', '.toggle-sidebar-btn', function(e) {select('body').classList.toggle('toggle-sidebar')})}let navbarlinks = select('#navbar .scrollto', true)const navbarlinksActive = () => {let position = window.scrollY + 200navbarlinks.forEach(navbarlink => {if (!navbarlink.hash) returnlet section = select(navbarlink.hash)if (!section) returnif (position >= section.offsetTop && position <= (section.offsetTop + section.offsetHeight)) {navbarlink.classList.add('active')} else {navbarlink.classList.remove('active')}})}window.addEventListener('load', navbarlinksActive)onscroll(document, navbarlinksActive)let selectHeader = select('#header')if (selectHeader) {const headerScrolled = () => {if (window.scrollY > 100) {selectHeader.classList.add('header-scrolled')} else {selectHeader.classList.remove('header-scrolled')}}window.addEventListener('load', headerScrolled)onscroll(document, headerScrolled)}let backtotop = select('.back-to-top')if (backtotop) {const toggleBacktotop = () => {if (window.scrollY > 100) {backtotop.classList.add('active')} else {backtotop.classList.remove('active')}}window.addEventListener('load', toggleBacktotop)onscroll(document, toggleBacktotop)}var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))var tooltipList = tooltipTriggerList.map(function(tooltipTriggerEl) {return new bootstrap.Tooltip(tooltipTriggerEl)})const datatables = select('.datatable', true)datatables.forEach(datatable => {new simpleDatatables.DataTable(datatable);})})();